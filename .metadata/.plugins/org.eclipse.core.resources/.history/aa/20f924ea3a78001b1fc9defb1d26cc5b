package com.devsuperior.dscatalog.services;

import java.util.Arrays;
import java.util.List;
import java.util.Optional;

import javax.persistence.EntityNotFoundException;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.dao.DataIntegrityViolationException;
import org.springframework.dao.EmptyResultDataAccessException;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageRequest;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.web.multipart.MultipartFile;

import com.devsuperior.dscatalog.dto.CategoryDTO;
import com.devsuperior.dscatalog.dto.ProductDTO;
import com.devsuperior.dscatalog.dto.UriDTO;
import com.devsuperior.dscatalog.entities.Category;
import com.devsuperior.dscatalog.entities.Product;
import com.devsuperior.dscatalog.repositories.CategoryRepository;
import com.devsuperior.dscatalog.repositories.ProductRepository;
import com.devsuperior.dscatalog.services.exceptions.DatabaseException;
import com.devsuperior.dscatalog.services.exceptions.ResourceNotFoundException;

@Service	
public class ProductService {
	
	@Autowired
	private ProductRepository repository;
	
	@Autowired
	private CategoryRepository categoryRepository;
	
	@Autowired
	private S3Service s3Service;
	
	//stream serve para transformar uma coleção em uma coleção de outro tipo,
	//o map vai percorrer a lista Product passando todos os objetos para ProductDTO,e no final
	//ele retorna uma lista do tipo stream entao e feita a conversao para lista 
	
	@Transactional(readOnly = true) //serve para manter a integridade do banco de dados,fazendo com que o jpa nao esteja aberto na camada de view
	public Page<ProductDTO> findAllPaged(Long categoryId,String name, PageRequest pageRequest ){
		List<Category> categories = (categoryId == 0) ? null : Arrays.asList( categoryRepository.getOne(categoryId)); //se categoryId =0 retorna null senao retorna o outro valor
		Page<Product> list = repository.find(categories,name,pageRequest);
		return list.map(x -> new ProductDTO(x));
	}

	
	@Transactional(readOnly = true)
	public ProductDTO findById(Long id) {
		Optional<Product> obj = repository.findById(id); //retorna um objeto do tipo optional que contem o objeto com id solicitado
		Product entity =  obj.orElseThrow(() -> new EntityNotFoundException("Entity not found"));    //caso nao seja achado o categories no obj ele lança a excessao           // obj.get(); passa para o entity o objeto solicitado pelo id
		return new ProductDTO(entity,entity.getCategories()); //retorna um objetodto com a entidade
	}
	
	@Transactional
	public ProductDTO insert(ProductDTO dto) {
		Product entity = new Product();
		copyDtoToEntity(dto,entity);
		entity = repository.save(entity);
		return new ProductDTO(entity);
	}
	
	//findById ele efetiva o acesso ao banco de dados e traz os dados do objeto
	//getOne nao toca no banco de dados ele provisiona um objeto provisorio com aquele id so quando for salvar que ele
	//vai no banco de dados
	
	@Transactional
	public ProductDTO update(Long id,ProductDTO dto) {
		try { 
			Product entity = repository.getOne(id);
			copyDtoToEntity(dto,entity);
			entity = repository.save(entity);
			return new ProductDTO(entity); 
		} //se o id nao existir ele vai lancar excecao
		catch(EntityNotFoundException e) {
			throw new ResourceNotFoundException("Id not found" +id);
		}
	}

	public void delete(Long id) {
		try {
			repository.deleteById(id);
		}
		catch( EmptyResultDataAccessException e ) {
			throw new ResourceNotFoundException("Id not found" +id);
		}
		catch( DataIntegrityViolationException e ) {
			throw new DatabaseException("Integrity violation");
		}
	}
	
	private void copyDtoToEntity(ProductDTO dto, Product entity) {
		entity.setName(dto.getName());
		entity.setDescription(dto.getDescription());
		entity.setDate(dto.getDate());
		entity.setImgUrl(dto.getImgUrl());
		entity.setPrice(dto.getPrice());
		
		entity.getCategories().clear(); //limpa a lista da entidade
		for(CategoryDTO catDto : dto.getCategories()) {
			Category category = categoryRepository.getOne(catDto.getId()); //pega os ids de todos os elementos do dto joga na entidade category sem tocar no banco
			entity.getCategories().add(category);
		}
	}


	public UriDTO uploadFile(MultipartFile file) {
		s3Service.uploadFile(file);
		return null;
	}

}
